require 'rspec'

# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.


# IMPLEMENTATION
# source: http://stackoverflow.com/questions/6418524/fibonacci-one-liner
# I didn't fully understand this solution, or the problem itself... anyways, it will serve as stimulation.
# A little bit about 'lazy' and 'take':
# http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/
# ===================================================================
def sum_even_fibonacci(num = 10)
  (1..Float::INFINITY)
    .lazy
    .map{|n| (0..n).inject([1,0]) {|(a,b), _| [b, a+b]}[0] }
    .take_while{|n| n < num}
    .select{|x| x % 2 == 0}
    .reduce(:+)
end


# SPEC
# ===================================================================
describe 'Find sum of all even elements of Fibonacci sequence' do
  it 'below 4.000.000, should result 4613732' do
    sum_even_fibonacci(4_000_000).should == 4613732
  end
end